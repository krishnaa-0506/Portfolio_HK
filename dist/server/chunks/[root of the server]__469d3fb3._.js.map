{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/POERT%20FOLIA/src/app/api/email-reply/route.ts"],"sourcesContent":["import { Resend } from 'resend';\r\nimport { NextResponse } from 'next/server';\r\n\r\nconst resend = new Resend(process.env.RESEND_API_KEY);\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { name, email, mobile, message } = await req.json();\r\n\r\n    // Validate input\r\n    if (!name || !email || !mobile || !message) {\r\n      return NextResponse.json({ message: 'All fields are required' }, { status: 400 });\r\n    }\r\n\r\n    // Send confirmation email to viewer\r\n    await resend.emails.send({\r\n      from: 'Hari Krishnaa <onboarding@resend.dev>',\r\n      to: email,\r\n      subject: 'Message Received - Hari Krishnaa',\r\n      text: `\r\nDear ${name},\r\n\r\nThank you for reaching out! Your message has been received, and I will reply in a professional manner within 24-48 hours.\r\n\r\nBest regards,\r\nHari Krishnaa\r\n      `,\r\n      html: `\r\n        <p>Dear ${name},</p>\r\n        <p>Thank you for reaching out! Your message has been received, and I will reply in a professional manner within 24-48 hours.</p>\r\n        <p>Best regards,<br>Hari Krishnaa</p>\r\n      `,\r\n    });\r\n\r\n    // Send notification email to you\r\n    await resend.emails.send({\r\n      from: 'Hari Krishnaa <onboarding@resend.dev>',\r\n      to: 'krishnaahari05@gmail.com',\r\n      subject: 'New Contact Form Submission',\r\n      text: `\r\nNew message from ${name}:\r\n\r\nName: ${name}\r\nEmail: ${email}\r\nMobile: ${mobile}\r\nMessage: ${message}\r\n      `,\r\n      html: `\r\n        <h3>New message from ${name}</h3>\r\n        <p><strong>Name:</strong> ${name}</p>\r\n        <p><strong>Email:</strong> ${email}</p>\r\n        <p><strong>Mobile:</strong> ${mobile}</p>\r\n        <p><strong>Message:</strong> ${message}</p>\r\n      `,\r\n    });\r\n\r\n    return NextResponse.json({ message: 'Emails sent successfully' }, { status: 200 });\r\n  } catch (error: any) {\r\n    console.error('Email error:', error);\r\n    return NextResponse.json({ message: 'Failed to send emails. Please try again later.' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;AAE7C,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAEvD,iBAAiB;QACjB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS;YAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,oCAAoC;QACpC,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;YACvB,MAAM;YACN,IAAI;YACJ,SAAS;YACT,MAAM,CAAC;KACR,EAAE,KAAK;;;;;;MAMN,CAAC;YACD,MAAM,CAAC;gBACG,EAAE,KAAK;;;MAGjB,CAAC;QACH;QAEA,iCAAiC;QACjC,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;YACvB,MAAM;YACN,IAAI;YACJ,SAAS;YACT,MAAM,CAAC;iBACI,EAAE,KAAK;;MAElB,EAAE,KAAK;OACN,EAAE,MAAM;QACP,EAAE,OAAO;SACR,EAAE,QAAQ;MACb,CAAC;YACD,MAAM,CAAC;6BACgB,EAAE,KAAK;kCACF,EAAE,KAAK;mCACN,EAAE,MAAM;oCACP,EAAE,OAAO;qCACR,EAAE,QAAQ;MACzC,CAAC;QACH;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAClF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAiD,GAAG;YAAE,QAAQ;QAAI;IACxG;AACF","debugId":null}}]
}