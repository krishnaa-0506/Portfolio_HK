{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/POERT%20FOLIA/src/app/api/email-reply/route.ts"],"sourcesContent":["import type { NextApiRequest, NextApiResponse } from 'next';\r\nimport nodemailer from 'nodemailer';\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ message: 'Method Not Allowed' });\r\n  }\r\n\r\n  const { name, email, mobile, message } = req.body;\r\n\r\n  // Validate input\r\n  if (!name || !email || !mobile || !message) {\r\n    return res.status(400).json({ message: 'All fields are required' });\r\n  }\r\n\r\n  // Create Nodemailer transporter\r\n  const transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n      user: process.env.GMAIL_USER, // Your Gmail address\r\n      pass: process.env.GMAIL_PASS, // Your Gmail App Password\r\n    },\r\n  });\r\n\r\n  try {\r\n    // Send confirmation email to viewer\r\n    await transporter.sendMail({\r\n      from: '\"Hari Krishnaa\" <krishnaahari05@gmail.com>',\r\n      to: email,\r\n      subject: 'Message Received - Hari Krishnaa',\r\n      text: `\r\nDear ${name},\r\n\r\nThank you for reaching out! Your message has been received, and I will reply in a professional manner within 24-48 hours.\r\n\r\nBest regards,\r\nHari Krishnaa\r\n      `,\r\n      html: `\r\n        <p>Dear ${name},</p>\r\n        <p>Thank you for reaching out! Your message has been received, and I will reply in a professional manner within 24-48 hours.</p>\r\n        <p>Best regards,<br>Hari Krishnaa</p>\r\n      `,\r\n    });\r\n\r\n    // Send notification email to you\r\n    await transporter.sendMail({\r\n      from: '\"Hari Krishnaa\" <krishnaahari05@gmail.com>',\r\n      to: 'krishnaahari05@gmail.com',\r\n      subject: 'New Contact Form Submission',\r\n      text: `\r\nNew message from ${name}:\r\n\r\nName: ${name}\r\nEmail: ${email}\r\nMobile: ${mobile}\r\nMessage: ${message}\r\n      `,\r\n      html: `\r\n        <h3>New message from ${name}</h3>\r\n        <p><strong>Name:</strong> ${name}</p>\r\n        <p><strong>Email:</strong> ${email}</p>\r\n        <p><strong>Mobile:</strong> ${mobile}</p>\r\n        <p><strong>Message:</strong> ${message}</p>\r\n      `,\r\n    });\r\n\r\n    return res.status(200).json({ message: 'Emails sent successfully' });\r\n  } catch (error) {\r\n    console.error('Email error:', error);\r\n    return res.status(500).json({ message: 'Failed to send emails' });\r\n  }\r\n}"],"names":[],"mappings":";;;AACA;;AAEe,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC7E,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;QAAqB;IAC9D;IAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,IAAI;IAEjD,iBAAiB;IACjB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS;QAC1C,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;QAA0B;IACnE;IAEA,gCAAgC;IAChC,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;QAC7C,SAAS;QACT,MAAM;YACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC9B;IACF;IAEA,IAAI;QACF,oCAAoC;QACpC,MAAM,YAAY,QAAQ,CAAC;YACzB,MAAM;YACN,IAAI;YACJ,SAAS;YACT,MAAM,CAAC;KACR,EAAE,KAAK;;;;;;MAMN,CAAC;YACD,MAAM,CAAC;gBACG,EAAE,KAAK;;;MAGjB,CAAC;QACH;QAEA,iCAAiC;QACjC,MAAM,YAAY,QAAQ,CAAC;YACzB,MAAM;YACN,IAAI;YACJ,SAAS;YACT,MAAM,CAAC;iBACI,EAAE,KAAK;;MAElB,EAAE,KAAK;OACN,EAAE,MAAM;QACP,EAAE,OAAO;SACR,EAAE,QAAQ;MACb,CAAC;YACD,MAAM,CAAC;6BACgB,EAAE,KAAK;kCACF,EAAE,KAAK;mCACN,EAAE,MAAM;oCACP,EAAE,OAAO;qCACR,EAAE,QAAQ;MACzC,CAAC;QACH;QAEA,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;QAA2B;IACpE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;QAAwB;IACjE;AACF","debugId":null}}]
}